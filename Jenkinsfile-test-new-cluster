
pipeline {
         agent any
         environment{
             PROJECT_ID = 'adminpage-chicago'
             CLUSTER_NAME = 'adminpage-cluster-test-gke'
             LOCATION = 'us-central1-b'
             CREDENTIALS_ID = 'gke'
             registry = "pavlohortovenko20/adminpage2.1:${env.BUILD_NUMBER}"
             registryCredential ='dockerhub_cred'
            }
         stages {
                 stage('Checout') {
                 steps {
                     checkout([$class: 'GitSCM', branches: [[name: '*/develop']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/carrectly/adminpage.git']]])
                        }
                     }
                 stage('Update Docketfile')  {
                     steps{
                         script {
                            def lastSuccessfulBuild = currentBuild.previousSuccessfulBuild
                            if (lastSuccessfulBuild) {
                                sh "sed -i.bak 's|<imageVersion>|pavlohortovenko20/adminpage2.1:${lastSuccessfulBuild.getNumber()}|' ./Dockerfile"
                            } else {
                                sh "sed -i.bak 's|<imageVersion>|node:16|' ./Dockerfile"
                            }
                        }
                    }
                }   
                 stage('Build') {
                 steps  {
                     script {
                        sh 'echo "" > .env'
                        sh 'echo GOOGLE_CLIENT_ID=$GOOGLE_CLIENT_ID  >>.env'
                        sh 'echo GOOGLE_CLIENT_SECRET=$GOOGLE_CLIENT_SECRET  >>.env'
                        sh 'echo GOOGLE_CALLBACK=$GOOGLE_CALLBACK_TEST  >>.env'
                        sh 'echo GOOGLE_REFRESH_TOKEN=$GOOGLE_REFRESH_TOKEN  >>.env'
                        sh 'echo ADMIN_DOMAIN =$ADMIN_DOMAIN_TEST  >>.env'
                        sh 'echo squareApplicationId =$squareApplicationId   >>.env'
                        sh 'echo SQUARE_TOKEN =$SQUARE_TOKEN  >>.env'
                        sh 'echo squareBasePath =$squareBasePath    >>.env'
                        sh 'echo SQUARE_LOCATION_ID=$SQUARE_LOCATION_ID  >>.env'
                        sh 'echo SQUARE_ENVIRONMENT=$SQUARE_ENVIRONMENT  >>.env'
                        sh 'echo CORPORATE_EMAIL=$CORPORATE_EMAIL >>.env'
                        sh 'echo travisApiToken=$travisApiToken >>.env '
                        sh 'echo DB_URL=$DB_URL_TEST_GKE >> .env'
                        sh 'echo ZOHO_CLIENT_ID=$ZOHO_CLIENT_ID_TEST >> .env'
                        sh 'echo ZOHO_CLIENT_SECRET=$ZOHO_CLIENT_SECRET_TEST >> .env'
                        sh 'echo ZOHO_REDIRECT_URL=$ZOHO_REDIRECT_URL_TEST >> .env'
                        sh 'echo ZOHO_SCOPES=$ZOHO_SCOPES >> .env'
                        sh 'echo ZOHO_BASE_URL=$ZOHO_BASE_URL >> .env'
                        sh 'echo ZOHO_API_URL=$ZOHO_API_URL >> .env'
                        sh 'echo ZOHO_CRM_API_URL=$ZOHO_CRM_API_URL >> .env'
                        sh 'echo TWILIO_ACCOUNT_SID=$TWILIO_ACCOUNT_SID >> .env'
                        sh 'echo TWILIO_AUTH_TOKEN=$TWILIO_AUTH_TOKEN >> .env'
                        sh 'echo TWILIO_PHONE_NUMBER=$TWILIO_PHONE_NUMBER >> .env'
                        dockerImage=docker.build registry 
                        }
                    }
                 }
                stage('Push image to registry') {
                 steps {
                     script{ 
                          docker.withRegistry( '', registryCredential ) {
                          dockerImage.push("${env.BUILD_NUMBER}")
                            }
                        }
                    }
                }
                stage('Remove older images') {
                 steps {
                         sh 'docker rmi $(docker images -q)'
                        }
                }
                stage('Set image by k8s') {
                    steps {
                        sh "sed -i.bak 's|<imageTag>|${registry}|' ./adminpage-deploy.yaml"
                    }
                }
                stage('GitPush') {
                   steps { 
                       sshagent(['git_jenkins']) {
                          sh 'mkdir deployment-helm'
                          sh 'git remote set-url origin git@github.com:gortovenko/adminpage-ready-project.git'
                          sh 'cp adminpage-deploy.yaml deployment-helm'
                          sh 'cp adminpage-deploy-svc.yaml deployment-helm'
                          sh 'git add ./deployment-helm'
                          sh "git commit -m 'Triggered Build: ${env.BUILD_NUMBER}'"
                          sh "git push -f origin HEAD:main"
                           }
                       }
                   }
                stage('Clear cache') {
                    steps {
                        script {
                            sh "curl -X POST -H 'X-Auth-Key: wqQWnVzWOEunJiuRJhsFB3UFCuuq0wcxNSvST3ik' -H 'X-Auth-Email: Taras@carrectly.com'  -H \'type: application/json\' -d'{\"purge_everything\" :true}' 'https://api.cloudflare.com/client/v4/zones/875042f8224b833f719cc2a5401369fa/purge_cache'"
                            }
                        }
                    }
                }
            }

/* If you wanna the change deployment process with use K8s plugin rollingupdates include, just use describe step belowe: 
in adminpage-deploy.yaml file describe process of rollingupdates  
be carereful with it cuz this step not waranty 100 % of property deployment if you use small cluster , sometimes not anothe memory of node by k8s cluster 
                 stage('Deploy to GKE') { 
                 steps { 
                    step([
                    $class: 'KubernetesEngineBuilder',
                    projectId: env.PROJECT_ID,
                    clusterName: env.CLUSTER_NAME,
                    location: env.LOCATION,
                    manifestPattern: 'adminpage-deploy.yaml',
                    credentialsId: env.CREDENTIALS_ID,
                    verifyDeployments: true])
                    }
                }*/
